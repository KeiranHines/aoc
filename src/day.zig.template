const std = @import("std");

const day = "dayX";

pub fn main() !void {
    const cwd = std.fs.cwd();
    var output_dir = try cwd.openDir("inputs", .{});
    defer output_dir.close();

    const file = try output_dir.openFile(day, .{});
    defer file.close();

    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    defer {
        _ = gpa.deinit();
    }
    const allocator = gpa.allocator();

    const stat = try file.stat();
    const content = try file.readToEndAlloc(allocator, stat.size);
    defer allocator.free(content);

    const result1 = part1(content);
    const result2 = part2(content);
    std.debug.print("{s}:\tpart 1 is {}\n\tpart 2 is {}\n", .{ day, result1, result2 });
}

pub fn part1(input: []const u8) u16 {
    _ = std.mem.splitAny(u8, input, "\n");
    const total: u16 = 0;
    return total;
}

fn part2(input: []const u8) u16 {
    _ = std.mem.splitAny(u8, input, "\n");
    const total: u16 = 0;
    return total;
}

test "p1Example" {
    const input =
        \\
    ;
    try std.testing.expectEqual(part1(input), @as(u8, 0));
}

test "p2Example" {
    const input =
        \\
    ;
    try std.testing.expectEqual(part2(input), @as(u32, 0));
}
